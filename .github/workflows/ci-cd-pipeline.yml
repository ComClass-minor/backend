name: CI/CD Pipeline with Docker Compose

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker Buildx (Docker Compose is included with Docker CLI)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up Python (if needed to run the config file to generate .env)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      # Generate .env file
      - name: Generate .env file
        run: |
          python core/config.py

      # Check if the .env file was generated
      - name: Check if the .env file was generated
        run: cat core/.env

      # Build Docker images using Docker Compose
      - name: Build services
        run: docker compose build

      # Deploy services in detached mode
      - name: Deploy services
        run: docker compose up -d
      
      - name: clean up
        run: docker compose down
  
  # we will add dummy test to make sure that this stage is working
  testing:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run tests
        run: |
          echo "Running tests..."


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run tests
        run: |
          echo "Running tests..."

  deploy:
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

    # Set up Docker Buildx (Docker Compose is included with Docker CLI)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

    # Set up Python (if needed to run the config file to generate .env)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      # Generate .env file
      - name: Generate .env file
        run: |
          python core/config.py

      # Check if the .env file was generated
      - name: Check if the .env file was generated
        run: cat core/.env

      # Login to Azure using the AZURE_CREDENTIALS secret
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        run: |
          az acr login --name comclassminorregistry

      # Build and Tag Docker Image
      - name: Build and Tag Docker Image
        run: |
          docker build -t comclassminorregistry.azurecr.io/comclass-minor-backend:latest .
          docker push comclassminorregistry.azurecr.io/comclass-minor-backend:latest

      # Create a Web App on Azure
      - name: Create a Web App on Azure
        run: |
          az webapp up --name comclass-minor-backend --sku F1 --location centralindia --os-type Linux
        

 # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'comclass-minor-backend' # replace with your Azure App Service name
          slot-name: 'production'
          images: comclassminorregistry.azurecr.io/backend-minor:latest